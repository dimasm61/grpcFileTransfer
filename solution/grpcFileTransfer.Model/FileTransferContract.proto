syntax = "proto3";

option csharp_namespace = "grpcFileTransfer.Model";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

package proto;

// // request for prepare file - compress and split to multi volume archive
// // it need for big files of directories - 50...1000 Mb.
// // compressing should begin  async
// message FileDownloadPrepareRequest{
//     int32 sessionKey = 1;
//     string relativeFilePath = 2;
//     bool needToCompress = 3;
//     uint32 filePartSizeKb = 4;
// }
// 
// // response says that session key is unique
// // and requested file (or folder) exists and compression has started
// message FileDownloadPrepareResponse{
//     bool sessionKeyIsOk = 1;
//     bool fileIsExitst = 2;
//     bool filePreparationStarted = 3;
//     string errMsg = 4;
// }

message FileDownloadRequest{

    // unique number for identify file download session
    int32 sessionKey = 1;

    enum FileDownloadRequestTypeEnum {
        StartSessionMsg = 0;
        ContinueSessionMsg = 1;
    }

    FileDownloadRequestTypeEnum RequestType = 2;

    message StartSessionItem{
        // file path which need download
        string relativeFilePath = 1;
    }

    message ContinueSessionItem{
        // file part num from with continue download
        uint32 filePartNum = 1;
    }

    StartSessionItem startSession = 3;

    ContinueSessionItem continueSession = 4;

}


// response stream message
message FileDownloadResponse{

    int32 sessionKey = 1;

    enum FileDownloadResponseType
    {
        ErrorMsg = 0;

        // a responce packet when session key already exists in server queue and client should be generate a new
        BadSessionKeyMsg = 1;
        //
        FileNotExists = 2;
        // if SessionKey is accepted, FileInfo is a first stream message with total file size and parts count
        FileInfoMsg = 3;
        // a message is sended while file preparing - compressing or buffering
        PreparingMsg = 4;
        // message with part of file data
        DataPartMsg = 5;
        // final message
        CompletedMsg = 6;
    }

    FileDownloadResponseType MsgType = 2;

    message FileInfoItem{
        uint64 fileLen = 1;
        uint32 filePartMaxLen = 2;
        uint32 filePartCount = 3;
        bytes fileCheckSum = 4;
    }

    message DataPartItem{
        uint32 filePartNum = 1;
        uint32 filePartLen = 2;
        bytes filePartCheckSum = 3;
        bytes filePartData = 4;
    }

    message DataErrorItem{
        string errorMessage = 1;
    }

    FileInfoItem fileInfoData = 3;

    DataPartItem partData = 4;

    DataErrorItem errorData = 5;

}

message FileDownloadFinishRequest{

    int32 sessionKey = 1;
    
    enum FileDownloadFinishRequestType{

        // if file downloading successful
        Commit = 0;

        // if file downloading interrupted by client
        Cancel = 1;
    }
}
message FileDownloadFinishResponse {
    bool Result = 1;

}


message FileUploadRequest{
    string fileName = 1;
    uint32 partCount = 2;
    uint32 partNum = 3;
    bytes data = 4;
}

message FileUploadPart{
    string fileName = 1;
    int64 fileLen = 2;
    uint32 partCount = 3;
    uint32 partNum = 4;
    bytes data = 5;
}

message FileUploadResponse{
    int32 status = 1;
}

service FileTransfer{

    //rpc FileDownloadPrepare(FileDownloadPrepareRequest) returns (FileDownloadPrepareResponse){}

    rpc FileDownload(FileDownloadRequest) returns (stream FileDownloadResponse){}

    rpc FileDownloadFinish(FileDownloadFinishRequest) returns(FileDownloadFinishResponse) {}

    rpc FileUpload(stream FileUploadPart) returns (FileUploadResponse){}

}